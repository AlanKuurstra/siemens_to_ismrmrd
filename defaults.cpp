#include <iostream>

std::string global_xml_VB_string("<?xml version="1.0" ?>
<gadgetron>
    <parameters>
        <p><s>MEAS.sKSpace.lBaseResolution</s>                      <d>siemens.MEAS.sKSpace.lBaseResolution</d></p>
        <p><s>MEAS.sKSpace.lPhaseEncodingLines</s>                  <d>siemens.MEAS.sKSpace.lPhaseEncodingLines</d></p>
        <p><s>MEAS.sKSpace.lPartitions</s>                          <d>siemens.MEAS.sKSpace.lPartitions</d></p>
        <p><s>MEAS.sKSpace.dPhaseResolution</s>                     <d>siemens.MEAS.sKSpace.dPhaseResolution</d></p>
        <p><s>MEAS.sKSpace.dSliceResolution</s>                     <d>siemens.MEAS.sKSpace.dSliceResolution</d></p>
        <p><s>MEAS.sKSpace.ucTrajectory</s>                         <d>siemens.MEAS.sKSpace.ucTrajectory</d></p>
        <p><s>MEAS.sKSpace.lImagesPerSlab</s>                       <d>siemens.MEAS.sKSpace.lImagesPerSlab</d></p>
        <p><s>MEAS.sKSpace.dSliceOversamplingForDialog</s>          <d>siemens.MEAS.sKSpace.dSliceOversamplingForDialog</d></p>
        <p><s>MEAS.sKSpace.ucPhasePartialFourier</s>                <d>siemens.MEAS.sKSpace.ucPhasePartialFourier</d></p>
        <p><s>MEAS.sKSpace.ucSlicePartialFourier</s>                <d>siemens.MEAS.sKSpace.ucSlicePartialFourier</d></p>
        <p><s>MEAS.sKSpace.lRadialViews</s>                         <d>siemens.MEAS.sKSpace.lRadialViews</d></p>
        <p><s>MEAS.sPat.ucPATMode</s>                               <d>siemens.MEAS.sPat.ucPATMode</d></p>
        <p><s>MEAS.sPat.ucRefScanMode</s>                           <d>siemens.MEAS.sPat.ucRefScanMode</d></p>
        <p><s>MEAS.sPat.lAccelFactPE</s>                            <d>siemens.MEAS.sPat.lAccelFactPE</d></p>
        <p><s>MEAS.sPat.lAccelFact3D</s>                            <d>siemens.MEAS.sPat.lAccelFact3D</d></p>
        <p><s>MEAS.sPat.lRefLinesPE</s>                             <d>siemens.MEAS.sPat.lRefLinesPE</d></p>
        <p><s>MEAS.sPat.lRefLines3D</s>                             <d>siemens.MEAS.sPat.lRefLines3D</d></p>
        <p><s>MEAS.sSliceArray.lSize</s>                            <d>siemens.MEAS.sSliceArray.lSize</d></p>
        <p><s>MEAS.sDiffusion.alBValue</s>                          <d>siemens.MEAS.sDiffusion.alBValue</d></p>
        <p><s>MEAS.sRXSPEC.alDwellTime</s>                          <d>siemens.MEAS.sRXSPEC.alDwellTime</d></p>
        <p><s>MEAS.alTR</s>                                         <d>siemens.MEAS.alTR</d></p>
        <p><s>MEAS.alTE</s>                                         <d>siemens.MEAS.alTE</d></p>
        <p><s>MEAS.lContrasts</s>                                   <d>siemens.MEAS.lContrasts</d></p>
        <p><s>MEAS.alTI</s>                                         <d>siemens.MEAS.alTI</d></p>
        <p><s>MEAS.sSliceArray.asSlice.0.dReadoutFOV</s>            <d>siemens.MEAS.sSliceArray.asSlice.s0.dReadoutFOV</d></p>
        <p><s>MEAS.sSliceArray.asSlice.0.dPhaseFOV</s>              <d>siemens.MEAS.sSliceArray.asSlice.s0.dPhaseFOV</d></p>
        <p><s>MEAS.sSliceArray.asSlice.0.dThickness</s>             <d>siemens.MEAS.sSliceArray.asSlice.s0.dThickness</d></p>
        <p><s>MEAS.sAngio.sFlowArray.lSize</s>                      <d>siemens.MEAS.sAngio.sFlowArray.lSize</d></p>
        <p><s>MEAS.sFastImaging.lShots</s>                          <d>siemens.MEAS.sFastImaging.lSegments</d></p>
        <p><s>MEAS.sPhysioImaging.lPhases</s>                       <d>siemens.MEAS.sPhysioImaging.lPhases</d></p>
        <p><s>MEAS.lRepetitions</s>                                 <d>siemens.MEAS.lRepetitions</d></p>
        <p><s>MEAS.lAverages</s>                                    <d>siemens.MEAS.lAverages</d></p>
        <p><s>MEAS.sWiPMemBlock.alFree</s>                          <d>siemens.MEAS.sWipMemBlock.alFree</d></p>
        <p><s>MEAS.sWiPMemBlock.adFree</s>                          <d>siemens.MEAS.sWipMemBlock.adFree</d></p>

        <p><s>IRIS.DERIVED.phaseOversampling</s>                    <d>siemens.IRIS.DERIVED.phaseOversampling</d></p>
        <p><s>IRIS.DERIVED.ImageColumns</s>                         <d>siemens.IRIS.DERIVED.imageColumns</d></p>
        <p><s>IRIS.DERIVED.ImageLines</s>                           <d>siemens.IRIS.DERIVED.imageLines</d></p>

        <p><s>YAPS.iNoOfFourierColumns</s>                          <d>siemens.YAPS.iNoOfFourierColumns</d></p>
        <p><s>YAPS.iNoOfFourierLines</s>                            <d>siemens.YAPS.iNoOfFourierLines</d></p>
        <p><s>YAPS.iNoOfFourierPartitions</s>                       <d>siemens.YAPS.iNoOfFourierPartitions</d></p>
        <p><s>YAPS.iRoFTLength</s>                                  <d>siemens.YAPS.iRoFTLength</d></p>
        <p><s>YAPS.iPEFTLength</s>                                  <d>siemens.YAPS.iPEFTLength</d></p>
        <p><s>YAPS.i3DFTLength</s>                                  <d>siemens.YAPS.i3DFTLength</d></p>
        <p><s>YAPS.tMRAcquisitionType</s>                           <d>siemens.YAPS.tMRAcquisitionType</d></p>
        <p><s>YAPS.flReadoutOSFactor</s>                            <d>siemens.YAPS.flReadoutOSFactor</d></p>
        <p><s>YAPS.iNSet</s>                                        <d>siemens.YAPS.iNSet</d></p>

        <!-- subjectInformationType --> 
        <p><s>DICOM.tPatientName</s>                                <d>siemens.DICOM.tPatientName</d></p>
        <p><s>YAPS.flUsedPatientWeight</s>                          <d>siemens.YAPS.flUsedPatientWeight</d></p>
        <p><s>IRIS.RECOMPOSE.PatientID</s>                          <d>siemens.IRIS.RECOMPOSE.PatientID</d></p>
        <p><s>IRIS.RECOMPOSE.PatientLOID</s>                        <d>siemens.IRIS.RECOMPOSE.PatientLOID</d></p>
        <p><s>IRIS.RECOMPOSE.PatientBirthDay</s>                    <d>siemens.IRIS.RECOMPOSE.PatientBirthDay</d></p>
        <p><s>DICOM.lPatientSex</s>                                 <d>siemens.DICOM.lPatientSex</d></p>

        <!-- studyInformationType --> 
        <p><s>IRIS.RECOMPOSE.StudyLOID</s>                          <d>siemens.IRIS.RECOMPOSE.StudyLOID</d></p>
        <!-- measurementInformationType --> 
        <p><s>HEADER.MeasUID</s>                                    <d>siemens.HEADER.MeasUID</d></p>
        <p><s>YAPS.tPatientPosition</s>                             <d>siemens.YAPS.tPatientPosition</d></p>
        <p><s>MEAS.tProtocolName</s>                                <d>siemens.MEAS.tProtocolName</d></p>
        <!-- acquisitionSystemInformationType --> 
        <p><s>DICOM.Manufacturer</s>                                <d>siemens.DICOM.Manufacturer</d></p>
        <p><s>DICOM.ManufacturersModelName</s>                      <d>siemens.DICOM.ManufacturersModelName</d></p>
        <p><s>YAPS.flMagneticFieldStrength</s>                      <d>siemens.YAPS.flMagneticFieldStrength</d></p>
        <p><s>YAPS.iMaxNoOfRxChannels</s>                           <d>siemens.YAPS.iMaxNoOfRxChannels</d></p>
        <p><s>DICOM.InstitutionName</s>                             <d>siemens.DICOM.InstitutionName</d></p>
        <!-- experimentalConditionsType --> 
        <p><s>DICOM.lFrequency</s>                                  <d>siemens.DICOM.lFrequency</d></p>
        <!-- dicomParametersType --> 
        <p><s>YAPS.tFrameOfReference</s>                            <d>siemens.YAPS.tFrameOfReference</d></p>
        <p><s>DICOM.Modality</s>                                    <d>siemens.DICOM.Modality</d></p>
        <p><s>DICOM.tScanningSequence</s>                           <d>siemens.DICOM.tScanningSequence</d></p>
        <p><s>DICOM.tMRAcquisitionType</s>                          <d>siemens.DICOM.tMRAcquisitionType</d></p>
        <p><s>DICOM.adFlipAngleDegree</s>                           <d>siemens.DICOM.adFlipAngleDegree</d></p>
        <!-- EPI parameter -->
        <p><s>MEAS.sFastImaging.lEPIFactor</s>                      <d>siemens.MEAS.sFastImaging.lEPIFactor</d></p>
        <p><s>YAPS.lEchoSpacing</s>                                 <d>siemens.YAPS.lEchoSpacing</d></p>
        <p><s>YAPS.alRegridRampupTime</s>                           <d>siemens.YAPS.alRegridRampupTime</d></p>
        <p><s>YAPS.alRegridRampdownTime</s>                         <d>siemens.YAPS.alRegridRampdownTime</d></p>
        <p><s>YAPS.alRegridFlattopTime</s>                          <d>siemens.YAPS.alRegridFlattopTime</d></p>
        <p><s>YAPS.alRegridDelaySamplesTime</s>                     <d>siemens.YAPS.alRegridDelaySamplesTime</d></p>
        <p><s>YAPS.aflRegridADCDuration</s>                         <d>siemens.YAPS.aflRegridADCDuration</d></p>
        <p><s>YAPS.alRegridDestSamples</s>                          <d>siemens.YAPS.alRegridDestSamples</d></p>

        <p><s>YAPS.lFirstFourierLine</s>                            <d>siemens.YAPS.lFirstFourierLine</d></p>
        <p><s>YAPS.lFirstFourierPartition</s>                       <d>siemens.YAPS.lFirstFourierPartition</d></p>

        <!-- user defined parameter -->
        <p><s>MEAS.sProtConsistencyInfo.tBaselineString</s> <d>siemens.MEAS.sProtConsistencyInfo.tBaselineString</d></p>
    </parameters>
</gadgetron>
");
std::string global_xml_VD_string("<?xml version="1.0" ?>
<gadgetron>
    <parameters>
        <p><s>MEAS.sKSpace.lBaseResolution</s>                      <d>siemens.MEAS.sKSpace.lBaseResolution</d></p>
        <p><s>MEAS.sKSpace.lPhaseEncodingLines</s>                  <d>siemens.MEAS.sKSpace.lPhaseEncodingLines</d></p>
        <p><s>MEAS.sKSpace.lPartitions</s>                          <d>siemens.MEAS.sKSpace.lPartitions</d></p>
        <p><s>MEAS.sKSpace.dPhaseResolution</s>                     <d>siemens.MEAS.sKSpace.dPhaseResolution</d></p>
        <p><s>MEAS.sKSpace.dSliceResolution</s>                     <d>siemens.MEAS.sKSpace.dSliceResolution</d></p>
        <p><s>MEAS.sKSpace.ucTrajectory</s>                         <d>siemens.MEAS.sKSpace.ucTrajectory</d></p>
        <p><s>MEAS.sKSpace.lImagesPerSlab</s>                       <d>siemens.MEAS.sKSpace.lImagesPerSlab</d></p>
        <p><s>MEAS.sKSpace.dSliceOversamplingForDialog</s>          <d>siemens.MEAS.sKSpace.dSliceOversamplingForDialog</d></p>
        <p><s>MEAS.sKSpace.ucPhasePartialFourier</s>                <d>siemens.MEAS.sKSpace.ucPhasePartialFourier</d></p>
        <p><s>MEAS.sKSpace.ucSlicePartialFourier</s>                <d>siemens.MEAS.sKSpace.ucSlicePartialFourier</d></p>
        <p><s>MEAS.sKSpace.lRadialViews</s>                         <d>siemens.MEAS.sKSpace.lRadialViews</d></p>
        <p><s>MEAS.sPat.ucPATMode</s>                               <d>siemens.MEAS.sPat.ucPATMode</d></p>
        <p><s>MEAS.sPat.ucRefScanMode</s>                           <d>siemens.MEAS.sPat.ucRefScanMode</d></p>
        <p><s>MEAS.sPat.lAccelFactPE</s>                            <d>siemens.MEAS.sPat.lAccelFactPE</d></p>
        <p><s>MEAS.sPat.lAccelFact3D</s>                            <d>siemens.MEAS.sPat.lAccelFact3D</d></p>
        <p><s>MEAS.sPat.lRefLinesPE</s>                             <d>siemens.MEAS.sPat.lRefLinesPE</d></p>
        <p><s>MEAS.sPat.lRefLines3D</s>                             <d>siemens.MEAS.sPat.lRefLines3D</d></p>
        <p><s>MEAS.sSliceArray.lSize</s>                            <d>siemens.MEAS.sSliceArray.lSize</d></p>
        <p><s>MEAS.sDiffusion.alBValue</s>                          <d>siemens.MEAS.sDiffusion.alBValue</d></p>
        <p><s>MEAS.sRXSPEC.alDwellTime</s>                          <d>siemens.MEAS.sRXSPEC.alDwellTime</d></p>
        <p><s>MEAS.alTR</s>                                         <d>siemens.MEAS.alTR</d></p>
        <p><s>MEAS.alTE</s>                                         <d>siemens.MEAS.alTE</d></p>
        <p><s>MEAS.lContrasts</s>                                   <d>siemens.MEAS.lContrasts</d></p>
        <p><s>MEAS.alTI</s>                                         <d>siemens.MEAS.alTI</d></p>
        <p><s>MEAS.sSliceArray.asSlice.0.dReadoutFOV</s>            <d>siemens.MEAS.sSliceArray.asSlice.s0.dReadoutFOV</d></p>
        <p><s>MEAS.sSliceArray.asSlice.0.dPhaseFOV</s>              <d>siemens.MEAS.sSliceArray.asSlice.s0.dPhaseFOV</d></p>
        <p><s>MEAS.sSliceArray.asSlice.0.dThickness</s>             <d>siemens.MEAS.sSliceArray.asSlice.s0.dThickness</d></p>
        <p><s>MEAS.sAngio.sFlowArray.lSize</s>                      <d>siemens.MEAS.sAngio.sFlowArray.lSize</d></p>
        <p><s>MEAS.sFastImaging.lShots</s>                          <d>siemens.MEAS.sFastImaging.lSegments</d></p>
        <p><s>MEAS.sPhysioImaging.lPhases</s>                       <d>siemens.MEAS.sPhysioImaging.lPhases</d></p>
        <p><s>MEAS.lRepetitions</s>                                 <d>siemens.MEAS.lRepetitions</d></p>
        <p><s>MEAS.lAverages</s>                                    <d>siemens.MEAS.lAverages</d></p>
        <p><s>MEAS.sWipMemBlock.alFree</s>                          <d>siemens.MEAS.sWipMemBlock.alFree</d></p>
        <p><s>MEAS.sWipMemBlock.adFree</s>                          <d>siemens.MEAS.sWipMemBlock.adFree</d></p>

        <p><s>IRIS.DERIVED.phaseOversampling</s>                    <d>siemens.IRIS.DERIVED.phaseOversampling</d></p>
        <p><s>IRIS.DERIVED.ImageColumns</s>                         <d>siemens.IRIS.DERIVED.imageColumns</d></p>
        <p><s>IRIS.DERIVED.ImageLines</s>                           <d>siemens.IRIS.DERIVED.imageLines</d></p>

        <p><s>YAPS.iNoOfFourierColumns</s>                          <d>siemens.YAPS.iNoOfFourierColumns</d></p>
        <p><s>YAPS.iNoOfFourierLines</s>                            <d>siemens.YAPS.iNoOfFourierLines</d></p>
        <p><s>YAPS.iNoOfFourierPartitions</s>                       <d>siemens.YAPS.iNoOfFourierPartitions</d></p>
        <p><s>YAPS.iRoFTLength</s>                                  <d>siemens.YAPS.iRoFTLength</d></p>
        <p><s>YAPS.iPEFTLength</s>                                  <d>siemens.YAPS.iPEFTLength</d></p>
        <p><s>YAPS.i3DFTLength</s>                                  <d>siemens.YAPS.i3DFTLength</d></p>
        <p><s>YAPS.tMRAcquisitionType</s>                           <d>siemens.YAPS.tMRAcquisitionType</d></p>
        <p><s>YAPS.flReadoutOSFactor</s>                            <d>siemens.YAPS.flReadoutOSFactor</d></p>
        <p><s>YAPS.iNSet</s>                                        <d>siemens.YAPS.iNSet</d></p>

        <!-- subjectInformationType --> 
        <p><s>DICOM.tPatientName</s>                                <d>siemens.DICOM.tPatientName</d></p>
        <p><s>YAPS.flUsedPatientWeight</s>                          <d>siemens.YAPS.flUsedPatientWeight</d></p>
        <p><s>IRIS.RECOMPOSE.PatientID</s>                          <d>siemens.IRIS.RECOMPOSE.PatientID</d></p>
        <p><s>IRIS.RECOMPOSE.PatientLOID</s>                        <d>siemens.IRIS.RECOMPOSE.PatientLOID</d></p>
        <p><s>IRIS.RECOMPOSE.PatientBirthDay</s>                    <d>siemens.IRIS.RECOMPOSE.PatientBirthDay</d></p>
        <p><s>DICOM.lPatientSex</s>                                 <d>siemens.DICOM.lPatientSex</d></p>

        <!-- studyInformationType --> 
        <p><s>IRIS.RECOMPOSE.StudyLOID</s>                          <d>siemens.IRIS.RECOMPOSE.StudyLOID</d></p>
        <!-- measurementInformationType --> 
        <p><s>HEADER.MeasUID</s>                                    <d>siemens.HEADER.MeasUID</d></p>
        <p><s>YAPS.tPatientPosition</s>                             <d>siemens.YAPS.tPatientPosition</d></p>
        <p><s>MEAS.tProtocolName</s>                                <d>siemens.MEAS.tProtocolName</d></p>
        <p><s>YAPS.ReconMeasDependencies.0</s>                      <d>siemens.YAPS.ReconMeasDependencies.RFMap</d></p>
        <p><s>YAPS.ReconMeasDependencies.1</s>                      <d>siemens.YAPS.ReconMeasDependencies.SenMap</d></p>
        <p><s>YAPS.ReconMeasDependencies.2</s>                      <d>siemens.YAPS.ReconMeasDependencies.Noise</d></p>
        <!-- acquisitionSystemInformationType --> 
        <p><s>DICOM.Manufacturer</s>                                <d>siemens.DICOM.Manufacturer</d></p>
        <p><s>DICOM.ManufacturersModelName</s>                      <d>siemens.DICOM.ManufacturersModelName</d></p>
        <p><s>YAPS.flMagneticFieldStrength</s>                      <d>siemens.YAPS.flMagneticFieldStrength</d></p>
        <p><s>YAPS.iMaxNoOfRxChannels</s>                           <d>siemens.YAPS.iMaxNoOfRxChannels</d></p>
        <p><s>DICOM.InstitutionName</s>                             <d>siemens.DICOM.InstitutionName</d></p>
        <!-- experimentalConditionsType --> 
        <p><s>DICOM.lFrequency</s>                                  <d>siemens.DICOM.lFrequency</d></p>
        <!-- dicomParametersType --> 
        <p><s>YAPS.tFrameOfReference</s>                            <d>siemens.YAPS.tFrameOfReference</d></p>
        <p><s>DICOM.Modality</s>                                    <d>siemens.DICOM.Modality</d></p>
        <p><s>DICOM.tScanningSequence</s>                           <d>siemens.DICOM.tScanningSequence</d></p>
        <p><s>DICOM.tMRAcquisitionType</s>                          <d>siemens.DICOM.tMRAcquisitionType</d></p>
        <p><s>DICOM.adFlipAngleDegree</s>                           <d>siemens.DICOM.adFlipAngleDegree</d></p>
        <!-- EPI parameter -->
        <p><s>MEAS.sFastImaging.lEPIFactor</s>                      <d>siemens.MEAS.sFastImaging.lEPIFactor</d></p>
        <p><s>YAPS.lEchoSpacing</s>                                 <d>siemens.YAPS.lEchoSpacing</d></p>
        <p><s>YAPS.alRegridRampupTime</s>                           <d>siemens.YAPS.alRegridRampupTime</d></p>
        <p><s>YAPS.alRegridRampdownTime</s>                         <d>siemens.YAPS.alRegridRampdownTime</d></p>
        <p><s>YAPS.alRegridFlattopTime</s>                          <d>siemens.YAPS.alRegridFlattopTime</d></p>
        <p><s>YAPS.alRegridDelaySamplesTime</s>                     <d>siemens.YAPS.alRegridDelaySamplesTime</d></p>
        <p><s>YAPS.aflRegridADCDuration</s>                         <d>siemens.YAPS.aflRegridADCDuration</d></p>
        <p><s>YAPS.alRegridDestSamples</s>                          <d>siemens.YAPS.alRegridDestSamples</d></p>

        <p><s>YAPS.lFirstFourierLine</s>                            <d>siemens.YAPS.lFirstFourierLine</d></p>
        <p><s>YAPS.lFirstFourierPartition</s>                       <d>siemens.YAPS.lFirstFourierPartition</d></p>

        <!-- user defined parameter -->
        <p><s>MEAS.sProtConsistencyInfo.tBaselineString</s> <d>siemens.MEAS.sProtConsistencyInfo.tBaselineString</d></p>
    </parameters>
</gadgetron>
");

std::string global_xsl_string("<?xml version="1.0" encoding="ISO-8859-1"?>

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <xsl:output method="xml" indent="yes"/>

    <xsl:variable name="phaseOversampling">
        <xsl:choose>
            <xsl:when test="not(siemens/IRIS/DERIVED/phaseOversampling)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="siemens/IRIS/DERIVED/phaseOversampling"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:variable name="sliceOversampling">
        <xsl:choose>
            <xsl:when test="not(siemens/MEAS/sKSpace/dSliceOversamplingForDialog)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="siemens/MEAS/sKSpace/dSliceOversamplingForDialog"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:variable name="partialFourierPhase">
        <xsl:choose>
            <xsl:when test="siemens/MEAS/sKSpace/ucPhasePartialFourier = 1">0.5</xsl:when>
            <xsl:when test="siemens/MEAS/sKSpace/ucPhasePartialFourier = 2">0.75</xsl:when>
            <xsl:when test="siemens/MEAS/sKSpace/ucPhasePartialFourier = 4">0.875</xsl:when>
            <xsl:otherwise>1.0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:variable name="numberOfContrasts">
        <xsl:value-of select="siemens/MEAS/lContrasts"/>
    </xsl:variable>

    <xsl:variable name="studyID">
        <xsl:value-of select="substring(siemens/IRIS/RECOMPOSE/StudyLOID, 6)"/>
    </xsl:variable>

    <xsl:variable name="patientID">
        <xsl:value-of select="substring(siemens/IRIS/RECOMPOSE/PatientLOID, 6)"/>
    </xsl:variable>

    <xsl:variable name="strSeperator">_</xsl:variable>

    <xsl:template match="/">
        <ismrmrdHeader xsi:schemaLocation="http://www.ismrm.org/ISMRMRD ismrmrd.xsd"
                xmlns="http://www.ismrm.org/ISMRMRD"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:xs="http://www.w3.org/2001/XMLSchema">

            <!--
            <subjectInformation>
                <patientName>
                    <xsl:value-of select="siemens/DICOM/tPatientName"/>
                </patientName>
                <xsl:if test="siemens/YAPS/flUsedPatientWeight > 0">
                    <patientWeight_kg>
                        <xsl:value-of select="siemens/YAPS/flUsedPatientWeight"/>
                    </patientWeight_kg>
                </xsl:if>
                <patientID>
                    <xsl:value-of select="siemens/IRIS/RECOMPOSE/PatientID"/>
                </patientID>
                <patientGender>
                    <xsl:choose>
                        <xsl:when test="siemens/DICOM/lPatientSex = 1">F</xsl:when>
                        <xsl:when test="siemens/DICOM/lPatientSex = 2">M</xsl:when>
                        <xsl:otherwise>O</xsl:otherwise>
                    </xsl:choose>
                </patientGender>
            </subjectInformation>
            -->

            <measurementInformation>
                <measurementID>
                    <xsl:value-of select="concat($patientID, $strSeperator, $studyID, $strSeperator, string(siemens/HEADER/MeasUID))"/>
                </measurementID>
                <patientPosition>
                    <xsl:value-of select="siemens/YAPS/tPatientPosition"/>
                </patientPosition>
                <protocolName>
                    <xsl:value-of select="siemens/MEAS/tProtocolName"/>
                </protocolName>

                <xsl:if test="siemens/YAPS/ReconMeasDependencies/RFMap > 0">
                    <measurementDependency>
                        <dependencyType>RFMap</dependencyType>
                        <measurementID>
                            <xsl:value-of select="siemens/YAPS/ReconMeasDependencies/RFMap"/>
                        </measurementID>
                    </measurementDependency>
                </xsl:if>

                <xsl:if test="siemens/YAPS/ReconMeasDependencies/SenMap > 0">
                    <measurementDependency>
                        <dependencyType>SenMap</dependencyType>
                        <measurementID>
                            <xsl:value-of select="siemens/YAPS/ReconMeasDependencies/SenMap"/>
                        </measurementID>
                    </measurementDependency>
                </xsl:if>

                <xsl:if test="siemens/YAPS/ReconMeasDependencies/Noise > 0">
                    <measurementDependency>
                        <dependencyType>Noise</dependencyType>
                        <measurementID>
                            <xsl:value-of select="siemens/YAPS/ReconMeasDependencies/Noise"/>
                        </measurementID>
                    </measurementDependency>
                </xsl:if>

            </measurementInformation>

            <acquisitionSystemInformation>
                <systemVendor>
                    <xsl:value-of select="siemens/DICOM/Manufacturer"/>
                </systemVendor>
                <systemModel>
                    <xsl:value-of select="siemens/DICOM/ManufacturersModelName"/>
                </systemModel>
                <systemFieldStrength_T>
                    <xsl:value-of select="siemens/YAPS/flMagneticFieldStrength"/>
                </systemFieldStrength_T>
                <receiverChannels>
                    <xsl:value-of select="siemens/YAPS/iMaxNoOfRxChannels" />
                </receiverChannels>
                <relativeReceiverNoiseBandwidth>0.793</relativeReceiverNoiseBandwidth>
                <institutionName>
                    <xsl:value-of select="siemens/DICOM/InstitutionName" />
                </institutionName>
            </acquisitionSystemInformation>

            <experimentalConditions>
                <H1resonanceFrequency_Hz>
                    <xsl:value-of select="siemens/DICOM/lFrequency"/>
                </H1resonanceFrequency_Hz>
            </experimentalConditions>
            <encoding>
                <trajectory>
                    <xsl:choose>
                        <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 1">cartesian</xsl:when>
                        <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 2">radial</xsl:when>
                        <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 4">spiral</xsl:when>
                        <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 8">propellor</xsl:when>
                        <xsl:otherwise>other</xsl:otherwise>
                    </xsl:choose>
                </trajectory>

                <xsl:if test="siemens/MEAS/sKSpace/ucTrajectory = 4">
                    <trajectoryDescription>
                        <identifier>HargreavesVDS2000</identifier>
                        <userParameterLong>
                            <name>interleaves</name>
                            <value>
                                <xsl:value-of select="siemens/MEAS/sKSpace/lRadialViews" />
                            </value>
                        </userParameterLong>
                        <userParameterLong>
                            <name>fov_coefficients</name>
                            <value>1</value>
                        </userParameterLong>
                        <userParameterLong>
                            <name>SamplingTime_ns</name>
                            <value>
                                <xsl:value-of select="siemens/MEAS/sWipMemBlock/alFree[57]" />
                            </value>
                        </userParameterLong>
                        <userParameterDouble>
                            <name>MaxGradient_G_per_cm</name>
                            <value>
                                <xsl:value-of select="siemens/MEAS/sWipMemBlock/adFree[7]" />
                            </value>
                        </userParameterDouble>
                        <userParameterDouble>
                            <name>MaxSlewRate_G_per_cm_per_s</name>
                            <value>
                                <xsl:value-of select="siemens/MEAS/sWipMemBlock/adFree[8]" />
                            </value>
                        </userParameterDouble>
                        <userParameterDouble>
                            <name>FOVCoeff_1_cm</name>
                            <value>
                                <xsl:value-of select="siemens/MEAS/sWipMemBlock/adFree[10]" />
                            </value>
                        </userParameterDouble>
                        <userParameterDouble>
                            <name>krmax_per_cm</name>
                            <value>
                                <xsl:value-of select="siemens/MEAS/sWipMemBlock/adFree[9]" />
                            </value>
                        </userParameterDouble>
                        <comment>Using spiral design by Brian Hargreaves (http://mrsrl.stanford.edu/~brian/vdspiral/)</comment>
                    </trajectoryDescription>
                </xsl:if>

                <xsl:if test="siemens/YAPS/alRegridRampupTime > 0">
                    <xsl:if test="siemens/YAPS/alRegridRampdownTime > 0">
                        <trajectoryDescription>
                            <identifier>ConventionalEPI</identifier>
                            <userParameterLong>
                                <name>etl</name>
                                <value>
                                    <xsl:value-of select="siemens/MEAS/sFastImaging/lEPIFactor"/>
                                </value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>numberOfNavigators</name>
                                <value>3</value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>rampUpTime</name>
                                <value>
                                    <xsl:value-of select="siemens/YAPS/alRegridRampupTime"/>
                                </value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>rampDownTime</name>
                                <value>
                                    <xsl:value-of select="siemens/YAPS/alRegridRampdownTime"/>
                                </value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>flatTopTime</name>
                                <value>
                                    <xsl:value-of select="siemens/YAPS/alRegridFlattopTime"/>
                                </value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>echoSpacing</name>
                                <value>
                                    <xsl:value-of select="siemens/YAPS/lEchoSpacing"/>
                                </value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>acqDelayTime</name>
                                <value>
                                    <xsl:value-of select="siemens/YAPS/alRegridDelaySamplesTime"/>
                                </value>
                            </userParameterLong>
                            <userParameterLong>
                                <name>numSamples</name>
                                <value>
                                    <xsl:value-of select="siemens/YAPS/alRegridDestSamples"/>
                                </value>
                            </userParameterLong>
                            <userParameterDouble>
                                <name>dwellTime</name>
                                <value>
                                    <xsl:value-of select="siemens/MEAS/sRXSPEC/alDwellTime div 1000.0"/>
                                </value>
                            </userParameterDouble>
                            <comment>Conventional 2D EPI sequence</comment>
                        </trajectoryDescription>
                    </xsl:if>
                </xsl:if>

                <encodedSpace>
                    <matrixSize>

                        <xsl:choose>
                            <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 1">
                                <x>
                                    <xsl:value-of select="siemens/YAPS/iNoOfFourierColumns"/>
                                </x>
                            </xsl:when>
                            <xsl:otherwise>
                                <x>
                                    <xsl:value-of select="siemens/IRIS/DERIVED/imageColumns"/>
                                </x>
                            </xsl:otherwise>
                        </xsl:choose>

                        <y>
                            <xsl:value-of select="siemens/MEAS/sKSpace/lPhaseEncodingLines"/>
                        </y>

                        <xsl:choose>
                            <xsl:when test="not(siemens/YAPS/iNoOfFourierPartitions) or (siemens/YAPS/i3DFTLength = 1)">
                                <z>1</z>
                            </xsl:when>
                            <xsl:otherwise>
                                <z>
                                    <xsl:value-of select="siemens/MEAS/sKSpace/lPartitions"/>
                                </z>
                            </xsl:otherwise>
                        </xsl:choose>
                    </matrixSize>

                    <fieldOfView_mm>
                        <xsl:choose>
                            <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 1">
                                <x>
                                    <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dReadoutFOV * siemens/YAPS/flReadoutOSFactor"/>
                                </x>
                            </xsl:when>
                            <xsl:otherwise>
                                <x>
                                    <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dReadoutFOV"/>
                                </x>
                            </xsl:otherwise>
                        </xsl:choose>
                        <y>
                            <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dPhaseFOV * (1+$phaseOversampling)"/>
                        </y>
                        <z>
                            <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dThickness * (1+$sliceOversampling)"/>
                        </z>
                    </fieldOfView_mm>
                </encodedSpace>
                <reconSpace>
                    <matrixSize>
                        <x>
                            <xsl:value-of select="siemens/IRIS/DERIVED/imageColumns"/>
                        </x>
                        <y>
                            <xsl:value-of select="siemens/IRIS/DERIVED/imageLines"/>
                        </y>
                        <xsl:choose>
                            <xsl:when test="siemens/YAPS/i3DFTLength = 1">
                                <z>1</z>
                            </xsl:when>
                            <xsl:otherwise>
                                <z>
                                    <xsl:value-of select="siemens/MEAS/sKSpace/lImagesPerSlab"/>
                                </z>
                            </xsl:otherwise>
                        </xsl:choose>
                    </matrixSize>
                    <fieldOfView_mm>
                        <x>
                            <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dReadoutFOV"/>
                        </x>
                        <y>
                            <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dPhaseFOV"/>
                        </y>
                        <z>
                            <xsl:value-of select="siemens/MEAS/sSliceArray/asSlice/s0/dThickness"/>
                        </z>
                    </fieldOfView_mm>
                </reconSpace>
                <encodingLimits>
                    <kspace_encoding_step_1>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:value-of select="siemens/YAPS/iNoOfFourierLines - 1"/>
                        </maximum>
                        <xsl:choose>
                            <xsl:when test="siemens/MEAS/sKSpace/ucTrajectory = 1">
                                <center>
                                    <xsl:value-of select="floor(siemens/MEAS/sKSpace/lPhaseEncodingLines div 2) - (siemens/MEAS/sKSpace/lPhaseEncodingLines - siemens/YAPS/iNoOfFourierLines)"/>
                                </center>
                            </xsl:when>
                            <xsl:otherwise>
                                <center>0</center>
                            </xsl:otherwise>
                        </xsl:choose>
                    </kspace_encoding_step_1>
                    <kspace_encoding_step_2>
                        <minimum>0</minimum>
                        <xsl:choose>
                            <xsl:when test="not(siemens/YAPS/iNoOfFourierPartitions) or (siemens/YAPS/i3DFTLength = 1)">
                                <maximum>0</maximum>
                                <center>0</center>
                            </xsl:when>
                            <xsl:otherwise>
                                <maximum>
                                    <xsl:value-of select="siemens/YAPS/iNoOfFourierPartitions - 1"/>
                                </maximum>
                                <center>
                                    <xsl:value-of select="floor(siemens/MEAS/sKSpace/lPartitions div 2) - (siemens/MEAS/sKSpace/lPartitions - siemens/YAPS/iNoOfFourierPartitions)"/>
                                </center>
                            </xsl:otherwise>
                        </xsl:choose>
                    </kspace_encoding_step_2>
                    <slice>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:value-of select="siemens/MEAS/sSliceArray/lSize - 1"/>
                        </maximum>
                        <center>0</center>
                    </slice>
                    <set>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:choose>
                                <xsl:when test="siemens/YAPS/iNSet">
                                    <xsl:value-of select="siemens/YAPS/iNSet"/>
                                </xsl:when>
                                <xsl:otherwise>0</xsl:otherwise>
                            </xsl:choose>
                        </maximum>
                        <center>0</center>
                    </set>
                    <phase>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:choose>
                                <xsl:when test="siemens/MEAS/sPhysioImaging/lPhases">
                                    <xsl:value-of select="siemens/MEAS/sPhysioImaging/lPhases"/>
                                </xsl:when>
                                <xsl:otherwise>0</xsl:otherwise>
                            </xsl:choose>
                        </maximum>
                        <center>0</center>
                    </phase>
                    <repetition>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:choose>
                                <xsl:when test="siemens/MEAS/lRepetitions">
                                    <xsl:value-of select="siemens/MEAS/lRepetitions"/>
                                </xsl:when>
                                <xsl:otherwise>0</xsl:otherwise>
                            </xsl:choose>
                        </maximum>
                        <center>0</center>
                    </repetition>
                    <segment>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:choose>
                                <xsl:when test="siemens/MEAS/sFastImaging/lSegments">
                                    <xsl:value-of select="siemens/MEAS/sFastImaging/lSegments"/>
                                </xsl:when>
                                <xsl:otherwise>0</xsl:otherwise>
                            </xsl:choose>
                        </maximum>
                        <center>0</center>
                    </segment>
                    <contrast>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:choose>
                                <xsl:when test="siemens/MEAS/lContrasts">
                                    <xsl:value-of select="siemens/MEAS/lContrasts"/>
                                </xsl:when>
                                <xsl:otherwise>0</xsl:otherwise>
                            </xsl:choose>
                        </maximum>
                        <center>0</center>
                    </contrast>
                    <average>
                        <minimum>0</minimum>
                        <maximum>
                            <xsl:choose>
                                <xsl:when test="siemens/MEAS/lAverages">
                                    <xsl:value-of select="siemens/MEAS/lAverages"/>
                                </xsl:when>
                                <xsl:otherwise>0</xsl:otherwise>
                            </xsl:choose>
                        </maximum>
                        <center>0</center>
                    </average>
                </encodingLimits>
            </encoding>

            <parallelImaging>
                <accelerationFactor>
                    <kspace_encoding_step_1>
                        <xsl:choose>
                            <xsl:when test="not(siemens/MEAS/sPat/lAccelFactPE)">1</xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="(siemens/MEAS/sPat/lAccelFactPE)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </kspace_encoding_step_1>
                    <kspace_encoding_step_2>
                        <xsl:choose>
                            <xsl:when test="not(siemens/MEAS/sPat/lAccelFact3D)">1</xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="(siemens/MEAS/sPat/lAccelFact3D)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </kspace_encoding_step_2>
                </accelerationFactor>
                <calibrationMode>
                    <xsl:choose>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 1">other</xsl:when>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 2">embedded</xsl:when>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 4">separate</xsl:when>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 8">separate</xsl:when>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 16">interleaved</xsl:when>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 32">interleaved</xsl:when>
                        <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 64">interleaved</xsl:when>
                        <xsl:otherwise>other</xsl:otherwise>
                    </xsl:choose>
                </calibrationMode>
                <xsl:if test="(siemens/MEAS/sPat/ucRefScanMode = 1) or (siemens/MEAS/sPat/ucRefScanMode = 16) or (siemens/MEAS/sPat/ucRefScanMode = 32) or (siemens/MEAS/sPat/ucRefScanMode = 64)">
                    <interleavingDimension>
                        <xsl:choose>
                            <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 16">average</xsl:when>
                            <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 32">repetition</xsl:when>
                            <xsl:when test="siemens/MEAS/sPat/ucRefScanMode = 64">phase</xsl:when>
                            <xsl:otherwise>other</xsl:otherwise>
                        </xsl:choose>
                    </interleavingDimension>
                </xsl:if>
            </parallelImaging>

            <sequenceParameters>
                <xsl:for-each select="siemens/MEAS/alTR">
                    <xsl:if test=". &gt; 0">
                        <TR>
                            <xsl:value-of select=". div 1000.0" />
                        </TR>
                    </xsl:if>
                </xsl:for-each>
                <xsl:for-each select="siemens/MEAS/alTE">
                    <xsl:if test=". &gt; 0">
                        <xsl:if test="position() &lt; ($numberOfContrasts + 1)">
                            <TE>
                                <xsl:value-of select=". div 1000.0" />
                            </TE>
                        </xsl:if>
                    </xsl:if>
                </xsl:for-each>
                <xsl:for-each select="siemens/MEAS/alTI">
                    <xsl:if test=". &gt; 0">
                        <TI>
                            <xsl:value-of select=". div 1000.0" />
                        </TI>
                    </xsl:if>
                </xsl:for-each>
            </sequenceParameters>

            <dicomParameters>
                <studyInstanceUID>
                    <xsl:value-of select="$studyID" />
                </studyInstanceUID>
                <frameOfReferenceUID>
                    <xsl:value-of select="siemens/YAPS/tFrameOfReference" />
                </frameOfReferenceUID>
                <MRImageModule>
                    <imageType>
                        <xsl:value-of select="siemens/DICOM/Modality" />
                    </imageType>
                    <scanningSequence>
                        <xsl:value-of select="siemens/DICOM/tScanningSequence" />
                    </scanningSequence>
                    <mrAcquisitionType>
                        <xsl:value-of select="siemens/DICOM/tMRAcquisitionType" />
                    </mrAcquisitionType>
                    <flipAngle_deg>
                        <xsl:value-of select="siemens/DICOM/adFlipAngleDegree" />
                    </flipAngle_deg>
                </MRImageModule>
            </dicomParameters>

            <xsl:if test="contains(siemens/MEAS/sProtConsistencyInfo/tBaselineString, 'VB') = 'true'">
                <userParameters>
                    <userParameterDouble>
                        <name>NoiseBandWidth</name>
                        <value>130.0</value>
                    </userParameterDouble>
                </userParameters>
            </xsl:if>

        </ismrmrdHeader>
    </xsl:template>

</xsl:stylesheet>
");
std::string global_xsd_string("<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xs:schema xmlns="http://www.ismrm.org/ISMRMRD" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.ismrm.org/ISMRMRD">

    <xs:element name="ismrmrdHeader" type="ismrmrdHeader"/>

    <xs:complexType name="ismrmrdHeader">
      <xs:sequence>
        <xs:element maxOccurs="1" minOccurs="0" name="subjectInformation" type="subjectInformationType"/>
        <xs:element maxOccurs="1" minOccurs="0" name="studyInformation" type="studyInformationType"/>
        <xs:element maxOccurs="1" minOccurs="0" name="measurementInformation" type="measurementInformationType"/>
        <xs:element maxOccurs="1" minOccurs="0" name="acquisitionSystemInformation" type="acquisitionSystemInformationType"/>
        <xs:element maxOccurs="1" minOccurs="1" name="experimentalConditions" type="experimentalConditionsType"/>
        <xs:element maxOccurs="unbounded" minOccurs="1" name="encoding" type="encoding"/>
        <xs:element maxOccurs="1" minOccurs="0" name="parallelImaging" type="parallelImagingType"/>
        <xs:element maxOccurs="1" minOccurs="0" name="sequenceParameters" type="sequenceParametersType"/>
        <xs:element maxOccurs="1" minOccurs="0" name="dicomParameters" type="dicomParametersType"/>
        <xs:element maxOccurs="1" minOccurs="0" name="userParameters" type="userParameters"/>
      </xs:sequence>
    </xs:complexType>

  <xs:complexType name="subjectInformationType">
    <xs:all>
      <xs:element minOccurs="0" name="patientName" type="xs:string"/>
      <xs:element minOccurs="0" name="patientWeight_kg" type="xs:float"/>
      <xs:element minOccurs="0" name="patientID" type="xs:string"/>
      <xs:element minOccurs="0" name="patientBirthdate" type="xs:date"/>
      <xs:element minOccurs="0" name="patientGender">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="[MFO]"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="studyInformationType">
    <xs:all>
      <xs:element minOccurs="0" name="studyDate" type="xs:date"/>
      <xs:element minOccurs="0" name="studyTime" type="xs:time"/>
      <xs:element minOccurs="0" name="studyID" type="xs:string"/>
      <xs:element minOccurs="0" name="accessionNumber" type="xs:long"/>
      <xs:element minOccurs="0" name="referringPhysicianName" type="xs:string"/>
      <xs:element minOccurs="0" name="studyDescription" type="xs:string"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="measurementInformationType">
    <xs:sequence>
      <xs:element minOccurs="0" name="measurementID" type="xs:string"/>
      <xs:element minOccurs="0" name="seriesDate" type="xs:date"/>
      <xs:element minOccurs="0" name="seriesTime" type="xs:time"/>
      <xs:element minOccurs="1" name="patientPosition">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="HFP"/>
            <xs:enumeration value="HFS"/>
            <xs:enumeration value="HFDR"/>
            <xs:enumeration value="HFDL"/>
            <xs:enumeration value="FFP"/>
            <xs:enumeration value="FFS"/>
            <xs:enumeration value="FFDR"/>
            <xs:enumeration value="FFDL"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="initialSeriesNumber" type="xs:long"/>
      <xs:element minOccurs="0" name="protocolName" type="xs:string"/>
      <xs:element minOccurs="0" name="seriesDescription" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="measurementDependency" type="measurementDependencyType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="measurementDependencyType">
    <xs:sequence>
        <xs:element maxOccurs="1" minOccurs="1" name="dependencyType" type="xs:string"/>
        <xs:element maxOccurs="1" minOccurs="1" name="measurementID" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="acquisitionSystemInformationType">
    <xs:all>
      <xs:element minOccurs="0" name="systemVendor" type="xs:string"/>
      <xs:element minOccurs="0" name="systemModel" type="xs:string"/>
      <xs:element minOccurs="0" name="systemFieldStrength_T" type="xs:float"/>
      <xs:element minOccurs="0" name="relativeReceiverNoiseBandwidth" type="xs:float"/>
      <xs:element minOccurs="0" name="receiverChannels" type="xs:unsignedShort"/>
      <xs:element minOccurs="0" name="institutionName" type="xs:string"/>
      <xs:element minOccurs="0" name="stationName" type="xs:string"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="experimentalConditionsType">
    <xs:all>
      <xs:element name="H1resonanceFrequency_Hz" type="xs:long"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="encoding">
    <xs:all>
      <xs:element maxOccurs="1" minOccurs="1" name="encodedSpace" type="encodingSpaceType"/>
      <xs:element maxOccurs="1" minOccurs="1" name="reconSpace" type="encodingSpaceType"/>
      <xs:element maxOccurs="1" minOccurs="1" name="encodingLimits" type="encodingLimitsType"/>
      <xs:element maxOccurs="1" minOccurs="1" name="trajectory" type="trajectoryType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="trajectoryDescription" type="trajectoryDescriptionType"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="encodingSpaceType">
    <xs:all>
      <xs:element maxOccurs="1" minOccurs="1" name="matrixSize" type="matrixSize"/>
      <xs:element maxOccurs="1" minOccurs="1" name="fieldOfView_mm" type="fieldOfView_mm"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="matrixSize">
    <xs:sequence>
      <xs:element default="1" maxOccurs="1" minOccurs="1" name="x" type="xs:unsignedShort"/>
      <xs:element default="1" maxOccurs="1" minOccurs="1" name="y" type="xs:unsignedShort"/>
      <xs:element default="1" maxOccurs="1" minOccurs="1" name="z" type="xs:unsignedShort"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="fieldOfView_mm">
    <xs:sequence>
      <xs:element maxOccurs="1" minOccurs="1" name="x" type="xs:float"/>
      <xs:element maxOccurs="1" minOccurs="1" name="y" type="xs:float"/>
      <xs:element maxOccurs="1" minOccurs="1" name="z" type="xs:float"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="limitType">
    <xs:all>
      <xs:element default="0" name="minimum" type="xs:unsignedShort"/>
      <xs:element default="0" name="maximum" type="xs:unsignedShort"/>
      <xs:element default="0" name="center" type="xs:unsignedShort"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="encodingLimitsType">
    <xs:all>
      <xs:element maxOccurs="1" minOccurs="0" name="kspace_encoding_step_0" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="kspace_encoding_step_1" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="kspace_encoding_step_2" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="average" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="slice" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="contrast" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="phase" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="repetition" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="set" type="limitType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="segment" type="limitType"/>
    </xs:all>
  </xs:complexType>

  <xs:simpleType name="trajectoryType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="cartesian"/>
      <xs:enumeration value="epi"/>
      <xs:enumeration value="radial"/>
      <xs:enumeration value="goldenangle"/>
      <xs:enumeration value="spiral"/>
      <xs:enumeration value="other"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="trajectoryDescriptionType">
    <xs:sequence>
      <xs:element maxOccurs="1" minOccurs="1" name="identifier" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="userParameterLong" type="userParameterLongType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="userParameterDouble" type="userParameterDoubleType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="comment" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="sequenceParametersType">
    <xs:sequence>
      <xs:element minOccurs="1" maxOccurs="unbounded" type="xs:float" name="TR"/>
      <xs:element minOccurs="1" maxOccurs="unbounded" type="xs:float" name="TE"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" type="xs:float" name="TI"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="userParameterLongType">
    <xs:all>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:long"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="userParameterDoubleType">
    <xs:all>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:double"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="userParameterStringType">
    <xs:all>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:string"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="userParameterBase64Type">
    <xs:all>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:base64Binary"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="dicomParametersType">
    <xs:all>
      <xs:element minOccurs="1" name="studyInstanceUID" type="xs:string"/>
      <xs:element minOccurs="0" name="seriesInstanceUIDRoot" type="xs:string"/>
      <xs:element minOccurs="0" name="frameOfReferenceUID" type="xs:string"/>
      <xs:element minOccurs="0" name="referencedImageSequence" type="referencedImageSequence"/>
      <xs:element minOccurs="0" name="MRImageModule" type="MRImageModule"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="referencedImageSequence">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="referencedSOPInstanceUID" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
      
  <xs:complexType name="MRImageModule">
    <xs:all>
      <xs:element minOccurs="0" name="imageType" type="xs:string"/>
      <xs:element minOccurs="0" name="scanningSequence" type="xs:string"/>
      <xs:element minOccurs="0" name="sequenceVariant" type="xs:string"/>
      <xs:element minOccurs="0" name="scanOptions" type="xs:string"/>
      <xs:element minOccurs="0" name="mrAcquisitionType" type="xs:string"/>
      <xs:element minOccurs="0" name="echoTrainLength" type="xs:long"/>
      <xs:element minOccurs="0" name="triggerTime" type="xs:float"/>
      <xs:element minOccurs="0" name="flipAngle_deg" type="xs:float"/>
      <xs:element minOccurs="0" name="freqEncodingDirection">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="ROW"/>
            <xs:enumeration value="COL"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="userParameters">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="userParameterLong" type="userParameterLongType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="userParameterDouble" type="userParameterDoubleType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="userParameterString" type="userParameterStringType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="userParameterBase64" type="userParameterBase64Type"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="accelerationFactorType">
    <xs:all>
      <xs:element name="kspace_encoding_step_1" type="xs:unsignedShort"/>
      <xs:element name="kspace_encoding_step_2" type="xs:unsignedShort"/>
    </xs:all>
  </xs:complexType>

  <xs:simpleType name="calibrationModeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="embedded"/>
      <xs:enumeration value="interleaved"/>
      <xs:enumeration value="separate"/>
      <xs:enumeration value="external"/>
      <xs:enumeration value="other"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="interleavingDimensionType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="phase"/>
      <xs:enumeration value="repetition"/>
      <xs:enumeration value="contrast"/>
      <xs:enumeration value="average"/>
      <xs:enumeration value="other"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="parallelImagingType">
  	<xs:sequence>
  	 <xs:element type="accelerationFactorType" name="accelerationFactor"/>
  	 <xs:element maxOccurs="1" minOccurs="0" type="calibrationModeType" name="calibrationMode"/>
  	 <xs:element maxOccurs="1" minOccurs="0" type="interleavingDimensionType" name="interleavingDimension"/>
  	</xs:sequence>
  </xs:complexType>
</xs:schema>
");
